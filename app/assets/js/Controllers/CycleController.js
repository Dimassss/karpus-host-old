class CycleController{constructor(){return g.Controller.Cycles.instance?g.Controller.Cycles.instance:(this.dao=new CyclesDAO,this.in=new CyclesInput,g.Controller.Cycles.instance=this)}addCyclesToNavBar(e,t){g.Controller.Cycles.instance.dao.dispalyCycles("TRUE ORDER BY id DESC LIMIT ?, ?",[g.Controller.Cycles.cyclesNavBarScrollCounter*g.Controller.Cycles.cyclesNavBarCountToSelect,g.Controller.Cycles.cyclesNavBarCountToSelect],t)}scrollNavBarLeft(e){g.Controller.Cycles.toScroll=setInterval(()=>document.querySelector(".cycles-tab-container .cycles").scrollBy(-3,0),6)}scrollNavBarRight(e){g.Controller.Cycles.toScroll=setInterval(()=>document.querySelector(".cycles-tab-container .cycles").scrollBy(3,0),6)}endScroll(e){clearInterval(g.Controller.Cycles.toScroll),g.Controller.Cycles.toScroll=void 0}createCycle(e){let t=g.Controller.Cycles.instance;var l=t.in.takeData("add_c");""!=l&&t.dao.createCycle(-1,l,l=>{t.dao.dispalyCycles("id = ?",[l],()=>{t.selectCycle(e,l)})})}selectCycle(e,t,l){let r=g.Controller.Cycles.instance;t=void 0!==t?t:e.target.getAttribute("for").split("-")[1],r.dao.fillCycleWindows(t,l)}editOrder(e){let t=g.Controller.Cycles.instance;t.dao.openOrderCreatingWindow(),t.dao.fillOrderCreatingWin(parseInt(e.target.parentNode.getAttribute("data-id")))}closeOrder(e){g.Controller.Cycles.instance.dao.closeOrderCreatingWindow()}saveOrder(e){let t=g.Controller.Cycles.instance;t.dao.getOrderFromPage((e,l)=>{t.dao.saveOrder(e),t.dao.saveCustomer(l),t.dao.closeOrderCreatingWindow()})}displayKitsOnCycleSelect(e){let t=g.Controller.Cycles.instance;t.dao.displayKits(t.in.takeData("AW_c_id"))}deleteCycle(e){let t=g.Controller.Cycles.instance,l=t.in.takeData("C_ID");t.dao.cleanCycleWindows(l),t.dao.deleteCycle(l)}deleteRecord(e){let t=g.Controller.Cycles.instance.in.takeData("Tbl_Slct"),l={orders:new OrderTableSQL,products:new ProductTableSQL,kits:new KitTableSQL}[t[0]];new CycleTableSQL;(new CyclesOutput).insertData(t[0][0].toUpperCase()+"_Tbl",{body:[[{id:t[1]}]]}),l.del([t[1]])}selectRecord(e){let t=g.Controller.Cycles.instance,l=t.in.takeData("Tbl_Slct");l[2]&&l[2].classList.remove("selected"),e.target.parentNode.classList.add("selected"),l=t.in.takeData("Tbl_Slct");let r={orders:void 0,products:t.dao.fillProductProfile,kits:t.dao.fillKitProfile}[l[0]];null!=r&&r(l[1],t.in.takeData("C_ID"))}addToArray(e){g.Controller.Cycles.instance.dao.addToArray(...{Paid:["AW_P",["",""]],Date:["AW_P",["",""]]}[e.target.parentNode.querySelector("input").getAttribute("placeholder")])}saveProduct(e,t){let l=g.Controller.Cycles.instance,r=new CyclesOutput;var o=l.dao.takeProductFromPage();const c=o.id+1;var a=new ProductTableSQL,n=new CycleTableSQL;"js-product-count-set"==e.path[4].id&&(console.log(o),Object.keys(o.count).forEach(e=>{o.count[e]||(o.count[e]=0)}),o.count["c-kt"]=o.count["c-st"]-o.count["c-wh"]-o.count["c-sh"],o.count["c-lft"]=o.count["c-kt"]-o.count["c-or"],r.insertData("P_C",o.count)),a.save([o],e=>{e[0].id!=c-1&&(n.load([e[0].cycleID],t=>{t[0]&&(t[0].productsID[t[0].productsID.length]=e[0].id,n.save(t,()=>{}))}),(new CyclesOutput).insertData("P_ID",e[0].id)),l.dao.fillProductsWin([e[0].id],t)})}saveKit(e,t,l){let r=g.Controller.Cycles.instance;var o=r.dao.takeKitFromPage();const c=o.id+1;(new KitTableSQL).save([o],e=>{let l=new CyclesOutput;e[0].id!=c-1&&l.insertData("K_ID",e[0].id),r.dao.fillKitsWin([e[0].id],t),l.insertData("K_PcPr",Number(e[0].pcPrice.toFixed(2))),l.insertData("K_PcW",Number(e[0].pcWeight.toFixed(2)))})}createKit(e){let t=g.Controller.Cycles.instance;Array.from(document.querySelectorAll("table .selected")).forEach(e=>e.classList.remove("selected")),t.dao.cleanKitProfile(t.in.takeData("C_ID"))}createProduct(e){let t=g.Controller.Cycles.instance;Array.from(document.querySelectorAll("table .selected")).forEach(e=>e.classList.remove("selected")),t.dao.cleanProductProfile()}search(e){g.Controller.Cycles.instance;let t=e.target.parentNode.querySelector("table"),l=e.target.value,r=""===l?()=>!0:e=>Array.from(e.querySelectorAll("td")).filter(e=>e.innerHTML.search(l)>-1).length>0;Array.from(t.querySelectorAll("tbody tr")).forEach(e=>e.style.display=r(e)?"table":"none")}updateOrderForm(e){let t=g.Controller.Cycles.instance,l=t.dao.getOrderFromPage(void 0,1);t.dao.updateOrderForm(l)}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
