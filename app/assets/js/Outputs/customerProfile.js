class CustomerProfileOutput extends Output{constructor(){function e(e){return document.querySelector(e)}function t(e){return document.querySelectorAll(e)}if(g.Output.customerProfile)return g.Output.customerProfile;var r;return super({e1:(t,s)=>{var i,o,a;if(s.head&&(i="<thead>",s.head.forEach(e=>{i+="<tr>",e.forEach(e=>{i+="<th"+(e[1]?` colspan="${e[1]}"`:"")+(e[2]?` rowspan="${e[2]}"`:"")+">"+e[0]+"</th>"}),i+="</tr>"}),i+="</thead>"),s.body)if(o={},"object"==typeof s.body)for(var n=0;n<s.body.length;n++){let e=s.body[n];if(e.length<=1)o[e[0].id]=void 0;else{for(var l=`<tr data-id="${e[0].id}"${e[0].class?` class="${e[0].class}"`:""}>`,c=1;c<e.length;c++){let t=e[c];l+=`<td${t[1]?` colspan="${t[1]}"`:""}${t[2]?` rowspan="${t[2]}"`:""}>${t[0]}</td>`}l+="</tr>",o[e[0].id]=l}}else e(t+" tbody").innerHTML="";if(s.foot&&(a="<tfoot>",s.foot.forEach(e=>{a+="<tr>",e.forEach(e=>{a+=`<td${e[1]?` colspan="${e[1]}"`:""}${e[2]?` rowspan="${e[2]}"`:""}>${e[0]}</td>`}),a+="</tr>"}),a+="</tfoot>"),i&&(r.q(t+" thead").outerHTML=i),a&&(r.q(t+" tfoot").outerHTML=a),o)for(var d in o){var u=e(t+` tbody tr[data-id="${d}"]`);if(u){let r=u.getAttribute("class")+".";u.outerHTML=o[d],e(t+` tbody tr[data-id="${d}"]`).setAttribute("class",r.slice(0,-1)),e(t+` tbody tr[data-id="${d}"]`).setAttribute("class",e(t+` tbody tr[data-id="${d}"]`).classList.value.replace(/js-hasEventListener-[-a-zA-Z0-9]+/g,""))}else r.q(t+" tbody").insertAdjacentHTML("beforeend",o[d])}},e2:(e,t)=>{r.q(e).value=t},e3:(e,t)=>{var s=r.q(e),i=" ."+s.getAttribute("id")+"-container",o="";s.value=t[0];for(var a=1;a<t.length;a++)o+=`<span class="chip ${s.getAttribute("id").substr(0,-1)}">\n                                          <chip>${t[a]}</chip>\n                                          <a href="#" class="btn btn-clear" id="${Math.random()}" aria-label="Close" role="button" onclick="this.parentNode.outerHTML = ''"></a>\n                                        </span>`;r.q(e.substr(0,-e.split(" ").reverse()[0].length)+i).innerHTML=o},e4:(e,t)=>{r.q(e).value=t[0];for(var s="",i=1;i<t.length;i++)s+=`<option>${t[i]}</option>`;r.q(e.substr(0,-e.split(" ").reverse()[0].length)+" datalist#"+r.q(e).getAttribute("list")).innerHTML=s},e5:(e,t)=>{r.q(e).checked=t},e6:(e,t)=>{var s=r.qa(e),i=" ."+s[0].getAttribute("data-array"),o="";s[0].value=t[0][parseInt(s[0].getAttribute("data-index"))],s[1].value=t[0][parseInt(s[1].getAttribute("data-index"))];for(var a=1;a<t.length;a++)t[a]&&t[a][0]&&t[a][1]&&(o+=`<span class="chip">\n                                          <chip>${t[a][0]} - ${t[a][1]}</chip>\n                                          <a href="#" class="btn btn-clear" onclick="this.parentNode.outerHTML = ''" aria-label="Close" role="button"></a>\n                                        </span>`);r.q(e.substr(0,-e.split(" ").reverse()[0].length)+i).innerHTML=o},e7:(e,t)=>{for(var r="",s=0;s<t.length;s++)2==t[s].length&&(r+=`<option value="${t[s][0]}"${t[s][2]?" selected":""}>${t[s][1]}</option>`);this.q(e).innerHTML=r},e8:(e,s)=>{for(var i in console.log(s),s){var o;console.log(s[i]),o="ind-"==i.substr(0,4)?`<div class="kit js-to-save" data-name="${i}">\n                                <h6 class="columns">\n                                  <div class="col-3">${i}</div>\n                                  <div class="col-3">${s[i].price}</div>\n                                  <div class="col-3">${s[i].weight}</div>\n                                  <div class="col-3"><input placeholder="Count" class="form-input" type="number" value="${s[i].count}" min="0" step="1"/></div>\n                                  <progress class="progress col-12" value="${s[i].progress_bars[0]}" min="0" max="100"></progress>\n                                  <progress class="progress col-12" value="${s[i].progress_bars[1]}" min="0" max="100"></progress>\n                                </h6>\n                                <div class="products-container unique-scroll">\n                                  ${(e=>{for(var t="",r=0;r<e.length;r++)t+=`<div class="product columns">\n                                                                              <div class="col-5">${e[r].name}</div>\n                                                                              <div class="col-1" data-weight="${e[r].weight}">${e[r].unit}</div>\n                                                                              <div class="col-3">${e[r].price}</div>\n                                                                              <div class="col-3"><input value="${e[r].count}" placeholder="Count" class="form-input" type="number"/></div>\n                                                                            </div>`;return t})(s[i].products)}\n                                </div>\n                              </div>`:`<div class="kit js-to-save" data-name="${i}">\n                                      <h6 class="columns">\n                                        <div class="col-3 weight">${Number(s[i].pcWeight.toFixed(2))} kg</div>\n                                        <div class="col-3">${s[i].pcPrice}</div>\n                                        <div class="col-3"><input value="${s[i].price}" placeholder="Price" class="form-input" type="number" min="0"/></div>\n                                        <div class="col-3"><input value="${s[i].count}" placeholder="Count" class="form-input" type="number" min="0" step="1"/></div>\n                                        <progress class="progress col-12" value="${s[i].progress_bars[0]}" min="0" max="100"></progress>\n                                        <progress class="progress col-12" value="${s[i].progress_bars[1]}" min="0" max="100"></progress>\n                                      </h6>\n                                      <div class="products-container unique-scroll">\n                                        ${(e=>{for(var t="",r=0;r<e.length;r++)t+=`<div class="product columns">\n                                                                                    <div class="col-5">${e[r].name}</div>\n                                                                                    <div class="col-1" data-weight="${e[r].weight}">${e[r].unit}</div>\n                                                                                    <div class="col-3">\n                                                                                      <select class="form-select">\n                                                                                        <option value="p-kt" title="kit"${"p-kt"==e[r].price.selected?" selected":""}>k-${e[r].price["p-kt"]}</option>\n                                                                                        <option value="p-wh" title="wholesale"${"p-wh"==e[r].price.selected?" selected":""}>w-${e[r].price["p-wh"]}</option>\n                                                                                        <option value="p-sh" title="shop"${"p-sh"==e[r].price.selected?" selected":""}>s-${e[r].price["p-sh"]}</option>\n                                                                                        <option value="p-rst" title="restaurant"${"p-rst"==e[r].price.selected?" selected":""}>r-${e[r].price["p-rst"]}</option>\n                                                                                      </select>\n                                                                                    </div>\n                                                                                    <div class="col-3"><input value="${e[r].count}" min="0" placeholder="Count" class="form-input" type="number"/></div>\n                                                                                  </div>`;return t})(s[i].products)}\n                                      </div></div>`;var a=r.q(`${e}[data-name="${i}"]`);a?a.outerHTML=o:r.q(`${e} span.add-kit`).parentNode.insertAdjacentHTML("beforebegin",o)}Array.from(t(`${e}:not(.js-to-save):not(.add)`)).forEach(e=>e.outerHTML=""),Array.from(t(`${e}.js-to-save`)).forEach(e=>e.classList.remove("js-to-save"))},e9:(e,t)=>{this.q(e).innerHTML=t},e10:(e,t)=>{this.q(e).setAttribute("data-id",t)},e11:(e,t)=>{this.q(e.replace("?",t)).remove()},e12:(t,r)=>{e(t.replace("?",r[2])+"div:nth-child(1)").innerHTML=r[1]+" kg",e(t.replace("?",r[2])+"div:nth-child(2)").innerHTML=r[0]}},[["WP_Tbl",".customerProfile table#customers","e1"],["WP_Tbl_CD",'.customerProfile table#customers tr[data-id="?"]',"e11"],["WP_Tbl_OD",'.customerProfile table#customer_orders tr[data-id="?"]',"e11"],["WP_ID",".customerProfile","e10"],["WP_Nm",".customerProfile input#js-full-name","e2"],["WP_Tel",".customerProfile input#js-telephones","e3"],["WP_Adr",".customerProfile input#js-addresses","e3"],["WP_E-m",".customerProfile input#js-e-mail","e2"],["WP_Nt",".customerProfile textarea#js-notes","e2"],["WP_Pr",".customerProfile textarea#js-preferences","e2"],["WP_SM",".customerProfile input#js-social-medias","e3"],["WP_Act",".customerProfile input#js-activity","e2"],["WO_Tbl",".customerProfile table#customer_orders","e1"],["AW_Opn","input#open-alert-window[name=open-alert-window]","e5"],["AW_ID",".alert-window","e10"],["AW_Nm",".alert-window h2:first-child","e9"],["AW_Tel",".alert-window input#js-telephones","e4"],["AW_SM",".alert-window input#js-social-media","e4"],["AW_ON",".alert-window textarea#js-order-notes","e2"],["AW_Pr",".alert-window textarea#js-order-preferences","e2"],["AW_Adr",".alert-window input#js-addresses","e4"],["AW_Sum",".alert-window input#js-summary","e2"],["AW_Bill",".alert-window input#js-is-billed","e5"],["AW_Pay",".alert-window input#js-order-paid","e2"],["AW_P",".alert-window input#js-order-pay-date, .alert-window input#js-order-paid","e6"],["AW_PD",".alert-window input#js-order-pay-date","e2"],["AW_c_id",".alert-window select#js-cycle","e7"],["AW_kits",".alert-window .kits .kit","e8"],["AW_n_ths",".alert-window input#js-is-not-this","e5"],["AW_an_FN",".alert-window input#js-another-full-name","e2"],["AW_an_Tel",".alert-window input#js-another-telephone","e2"],["AW_SumPC",".alert-window label#js-summary-pc","e9"],["AW_KtPC",".alert-window .kits .kit[data-name='?'] h6 ","e12"]]),r=this,g.Output.customerProfile=this}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
