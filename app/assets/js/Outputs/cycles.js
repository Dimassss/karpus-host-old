class CyclesOutput extends Output{constructor(){function e(e){return document.querySelector(e)}function t(e){return document.querySelectorAll(e)}if(g.Output.cycles)return g.Output.cycles;var s;return super({e1:(t,s)=>{var n,r,o;if(s.head&&(n="<thead>",s.head.forEach(e=>{n+="<tr>",e.forEach(e=>{"id"!=e[0]&&(n+="<th"+(e[1]?` colspan="${e[1]}"`:"")+(e[2]?` rowspan="${e[2]}"`:"")+">"+e[0]+"</th>")}),n+="</tr>"}),n+="</thead>"),s.body&&(r={},-1==s.body?e(t+" tbody").innerHTML="":s.body.forEach(e=>{if(e.length<=1)r[e[0].id]="";else{for(var t=`<tr data-id="${e[0].id}">`,s=1;s<e.length;s++){let n=e[s];t+=`<td${n[1]?` colspan="${n[1]}"`:""}${n[2]?` rowspan="${n[2]}"`:""}>${n[0]}</td>`}t+="</tr>",r[e[0].id]=t}})),s.foot&&(o="<tfoot>",s.foot.forEach(e=>{o+="<tr>",e.forEach(e=>{"id"!=e[0]&&(o+=`<td${e[1]?` colspan="${e[1]}"`:""}${e[2]?` rowspan="${e[2]}"`:""}>${e[0]}</td>`)}),o+="</tr>"}),o+="</tfoot>"),n&&(e(t+" thead").outerHTML=n),o&&(e(t+" tfoot").outerHTML=o),r)for(var i in r){var a=e(t+` tbody tr[data-id='${i}']`);a?a.classList.contains("selected")&&""!=r[i]?a.outerHTML=r[i].substr(0,4)+'class="selected" '+r[i].substr(4):a.outerHTML=r[i]:e(t+" tbody").insertAdjacentHTML("beforeend",r[i])}},e2:(t,s)=>{e(t).value=s,e(t).innerText=s},e3:(t,s)=>{for(var n in s)e(`${t} input[data-type='${n}']`).value=s[n]},e4:(t,s)=>{e(t).outerHTML=`<div class="kit" style="margin-top: .5rem">\n                                  <h6 class="columns">\n                                    <div class="col-12" style="padding-bottom:.3rem" onclick="Array.from(this.parentNode.parentNode.querySelectorAll('.products-container div.product input')).forEach(inp => {if(!parseInt(inp.value)) inp.parentNode.parentNode.style.display = inp.parentNode.parentNode.style.display=='none'?'flex':'none'})">Kit creating</div>\n                                    <progress class="progress col-12" value="${s.progress_bars[0]}" min="0" max="100"></progress>\n                                    <progress class="progress col-12" value="${s.progress_bars[1]}" min="0" max="100"></progress>\n                                  </h6>\n                                  <div class="products-container unique-scroll">\n                                    ${(e=>{for(var t="",s=0;s<e.length;s++)t+=`<div class="product columns" ${e[s].count>0?"":'style="display:none"'}>\n                                                                                <div class="col-5">${e[s].name}</div>\n                                                                                <div class="col-1" data-weight="${e[s].weight}">${e[s].unit}</div>\n                                                                                <div class="col-3">\n                                                                                  <select class="form-select">\n                                                                                    <option value="p-kt" title="kit"${"p-kt"==e[s].price.selected?" selected":""}>k-${e[s].price["p-kt"]}</option>\n                                                                                    <option value="p-wh" title="wholesale"${"p-wh"==e[s].price.selected?" selected":""}>w-${e[s].price["p-wh"]}</option>\n                                                                                    <option value="p-sh" title="shop"${"p-sh"==e[s].price.selected?" selected":""}>s-${e[s].price["p-sh"]}</option>\n                                                                                    <option value="p-rst" title="restaurant"${"p-rst"==e[s].price.selected?" selected":""}>r-${e[s].price["p-rst"]}</option>\n                                                                                  </select>\n                                                                                </div>\n                                                                                <div class="col-3"><input value="${e[s].count}" min="0" placeholder="Count" class="form-input" type="number"/></div>\n                                                                              </div>`;return t})(s.products)}\n                                  </div></div>`},e5:(t,s)=>{e(t).value=s.join(" ")},e6:(t,s)=>{for(var n in s){let r=e(`${t}[for=cycle-${n}]`);r?s[n]?r.innerHTML=s[n]:e(t+"[for=cycle-"+n+"]").outerHTML="":e(t.slice(0,-6)).insertAdjacentHTML("beforeend",`<label for="cycle-${n}">${s[n]}</label>`)}},e7:(e,t)=>{this.q(e).setAttribute("data-id",t)},e8:(e,t)=>{this.q(e).innerHTML=t},e9:(e,t)=>{s.q(e).value=t[0];for(var n="",r=1;r<t.length;r++)n+=`<option>${t[r]}</option>`;s.q(e.substr(0,-e.split(" ").reverse()[0].length)+" datalist#"+s.q(e).getAttribute("list")).innerHTML=n},e10:(e,t)=>{s.q(e).checked=t},e11:(e,t)=>{var n=s.qa(e),r=" ."+n[0].getAttribute("data-array"),o="";n[0].value=t[0][parseInt(n[0].getAttribute("data-index"))],n[1].value=t[0][parseInt(n[1].getAttribute("data-index"))];for(var i=1;i<t.length;i++)t[i][0]&&t[i][1]&&(o+=`<span class="chip">\n                                          <chip>${t[i][0]} - ${t[i][1]}</chip>\n                                          <a href="#" class="btn btn-clear" id="close-${Math.random()}" aria-label="Close" role="button"></a>\n                                        </span>`);s.q(e.substr(0,-e.split(" ").reverse()[0].length)+r).innerHTML=o},e12:(e,t)=>{for(var s="",n=0;n<t.length;n++)2==t[n].length&&(s+=`<option value="${t[n][0]}"${0==n?" selected":""}>${t[n][1]}</option>`);this.q(e).innerHTML=s},e13:(e,n)=>{for(var r in n){var o;o="ind-"==r.substr(0,4)?`<div class="kit js-to-save" data-name="${r}">\n                                <h6 class="columns">\n                                  <div class="col-3">${r}</div>\n                                  <div class="col-3">${n[r].price}</div>\n                                  <div class="col-3">${n[r].weight}</div>\n                                  <div class="col-3"><input placeholder="Count" class="form-input" type="number" value="${n[r].count}" min="0" step="1"/></div>\n                                  <progress class="progress col-12" value="${n[r].progress_bars[0]}" min="0" max="100"></progress>\n                                  <progress class="progress col-12" value="${n[r].progress_bars[1]}" min="0" max="100"></progress>\n                                </h6>\n                                <div class="products-container unique-scroll">\n                                  ${(e=>{for(var t="",s=0;s<e.length;s++)t+=`<div class="product columns">\n                                                                              <div class="col-5">${e[s].name}</div>\n                                                                              <div class="col-1" data-weight="${e[s].weight}">${e[s].unit}</div>\n                                                                              <div class="col-3">${e[s].price}</div>\n                                                                              <div class="col-3"><input value="${e[s].count}" placeholder="Count" class="form-input" type="number"/></div>\n                                                                            </div>`;return t})(n[r].products)}\n                                </div>\n                              </div>`:`<div class="kit js-to-save" data-name="${r}">\n                                      <h6 class="columns">\n                                        <div class="col-3 weight">${Number(n[r].pcWeight.toFixed(2))} kg</div>\n                                        <div class="col-3">${n[r].pcPrice}</div>\n                                        <div class="col-3"><input value="${n[r].price}" placeholder="Price" class="form-input" type="number" min="0"/></div>\n                                        <div class="col-3"><input value="${n[r].count}" placeholder="Count" class="form-input" type="number" min="0" step="1"/></div>\n                                        <progress class="progress col-12" value="${n[r].progress_bars[0]}" min="0" max="100"></progress>\n                                        <progress class="progress col-12" value="${n[r].progress_bars[1]}" min="0" max="100"></progress>\n                                      </h6>\n                                      <div class="products-container unique-scroll">\n                                        ${(e=>{for(var t="",s=0;s<e.length;s++)t+=`<div class="product columns">\n                                                                                    <div class="col-5">${e[s].name}</div>\n                                                                                    <div class="col-1" data-weight="${e[s].weight}">${e[s].unit}</div>\n                                                                                    <div class="col-3">\n                                                                                      <select class="form-select">\n                                                                                        <option value="p-kt" title="kit"${"p-kt"==e[s].price.selected?" selected":""}>k-${e[s].price["p-kt"]}</option>\n                                                                                        <option value="p-wh" title="wholesale"${"p-wh"==e[s].price.selected?" selected":""}>w-${e[s].price["p-wh"]}</option>\n                                                                                        <option value="p-sh" title="shop"${"p-sh"==e[s].price.selected?" selected":""}>s-${e[s].price["p-sh"]}</option>\n                                                                                        <option value="p-rst" title="restaurant"${"p-rst"==e[s].price.selected?" selected":""}>r-${e[s].price["p-rst"]}</option>\n                                                                                      </select>\n                                                                                    </div>\n                                                                                    <div class="col-3"><input value="${e[s].count}" min="0" placeholder="Count" class="form-input" type="number"/></div>\n                                                                                  </div>`;return t})(n[r].products)}\n                                      </div></div>`;var i=s.q(`${e}[data-name="${r}"]`);i?i.outerHTML=o:s.q(`${e} span.add-kit`).parentNode.insertAdjacentHTML("beforebegin",o)}Array.from(t(`${e}:not(.js-to-save):not(.add)`)).forEach(e=>e.outerHTML=""),Array.from(t(`${e}.js-to-save`)).forEach(e=>e.classList.remove("js-to-save"))},e14:(e,t)=>{this.q(e).setAttribute("data-customer-id",t)},e15:(e,t)=>{let s=Array.from(this.q(e).options).find(e=>e.value==t);s&&(this.q(e).selectedIndex=s.index)},e16:(t,s)=>{e(t.replace("?",s[2])+"div:nth-child(1)").innerHTML=s[1]+" kg",e(t.replace("?",s[2])+"div:nth-child(2)").innerHTML=s[0]}},[["C_ID","section.cycles-container .cycle","e7"],["P_ID",".w-products form","e7"],["K_ID",".w-kits form","e7"],["C_ACC",".cycles-tab-container .controll input[name='new-cycle-name']","e2"],["C_CL1",".cycles-tab-container .cycles label","e6"],["C_CL2",".cycles-tab-container .controll .drop .dropup-content label","e6"],["O_Tbl",".w-orders table#orders","e1"],["K_Tbl",".w-kits table#kits","e1"],["K_Nm",".w-kits .content form input#js-kit-name","e2"],["K_Pr",".w-kits .content form input#js-kit-price","e2"],["K_PcPr",".w-kits .content form #js-kit-pc-price","e2"],["K_Tp",".w-kits .content form input#js-kit-type","e2"],["K_Sz",".w-kits .content form input#js-kit-size","e2"],["K_Dm",".w-kits .content form input#js-kit-dimensions","e5"],["K_W",".w-kits .content form input#js-kit-weight","e2"],["K_PcW",".w-kits .content form #js-kit-pc-weight","e2"],["K_D",".w-kits .content form textarea#js-kit-description","e2"],["K_Cr",".w-kits .content .kits .kit","e4"],["P_Tbl",".w-products table#products","e1"],["P_Nm",".w-products .content form input#js-product-name","e2"],["P_Unt",".w-products .content form select#js-product-unit","e15"],["P_C",".w-products .content form table#js-product-count-set","e3"],["P_Pr",".w-products .content form table#js-product-price-set","e3"],["P_Dm",".w-products .content form input#js-product-dimensions","e5"],["P_W",".w-products .content form input#js-product-weight","e2"],["P_D",".w-products .content form textarea#js-product-description","e2"],["AW_ID",".alert-window","e7"],["AW_Nm",".alert-window h2:first-child","e8"],["AW_Tel",".alert-window input#js-telephones","e9"],["AW_SM",".alert-window input#js-social-media","e9"],["AW_ON",".alert-window textarea#js-order-notes","e2"],["AW_Pr",".alert-window textarea#js-order-preferences","e2"],["AW_Adr",".alert-window input#js-addresses","e9"],["AW_Sum",".alert-window input#js-summary","e2"],["AW_SumPC",".alert-window label#js-summary-pc","e2"],["AW_Bill",".alert-window input#js-is-billed","e10"],["AW_Pay",".alert-window input#js-order-paid","e2"],["AW_P",".alert-window input#js-order-pay-date, .alert-window input#js-order-paid","e11"],["AW_PD",".alert-window input#js-order-pay-date","e2"],["AW_c_id",".alert-window select#js-cycle","e12"],["AW_kits",".alert-window .kits .kit","e13"],["AW_n_ths",".alert-window input#js-is-not-this","e10"],["AW_an_FN",".alert-window input#js-another-full-name","e2"],["AW_an_Tel",".alert-window input#js-another-telephone","e2"],["AW_KtPC",".alert-window .kits .kit[data-name='?'] h6 ","e16"],["Cstm_ID",".alert-window","e14"]]),s=this,g.Output.cycles=this}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
