var websql=function(){var e=!1,t=function(){},s=[],r={database:null,logInfo:!1,logErrors:!0,putSelectResultsInArray:!0,defaultFailureCallback:t};function a(e){return e.replace(/^\s+/,"").replace(/\s+$/,"")}function n(e){return void 0===e}var o=new RegExp("^select\\s","i");function l(e){return o.test(e)}function c(e,t,s,a){var n=0,o=null,c=function(){e.executeSql(t[n].sql,t[n].data,i,u)},i=function(e,a){var i,u,f=[];if(r.logInfo&&console.log("Success processing: "+t[n].sql),r.putSelectResultsInArray&&l(t[n].sql))for(i=0,u=a.rows.length;i<u;i++)f[i]=a.rows.item(i);else f=null;o=t[n].success(e,a,f),n++,o&&$.isArray(o)?(t[n].data=o,o=null):o=null,t.length>n?c():s(e,a,f)},u=function(e,s){r.logErrors&&console.error("Error: "+s.message+" while processing statment "+(n+1)+": "+t[n].sql),a(s,t[n].sql)};c()}var i=function(e){if("string"==typeof e&&(e={sql:e}),this.sql=e.sql,this.data=e.data||s,this.success=e.success||t,"string"!=typeof this.sql||"function"!=typeof this.success||!$.isArray(this.data))throw new Error("Malformed sql object: "+this)};function u(e){var t,s;if("string"==typeof e)for(e=(e=a(e)).split(";"),t=1;t<e.length;t++){for(;e[t].split(/["]/gm).length%2==0||e[t].split(/[']/gm).length%2==0||e[t].split(/[`]/gm).length%2==0;)e.splice(t,2,e[t]+";"+e[t+1]);e[t]=a(e[t])+";",";"===e[t]&&e.splice(t,1)}for(!1==(s=e,"[object Array]"===Object.prototype.toString.call(s))&&(e=[new i(e)]),t=0;t<e.length;t++)e[t]=new i(e[t]);return e}return r.openDatabase=function(t,s,a,n){r.database=openDatabase(t,"",s,a),e="function"==typeof r.database.readTransaction,n&&n()},r.process=function(s,a,o){if(!r.database)return r.logErrors&&console.error("Error: Database needs to be opened before sql can be processed."),!1;var i=u(s);n(a)&&(a=t),n(o)&&(o=r.defaultFailureCallback),function(e){var t=0;do{if(!l(e[t].sql))return!1;t++}while(t<e.length);return!0}(i)&&e?r.database.readTransaction((function(e){c(e,i,a,o)}),o):r.database.transaction((function(e){c(e,i,a,o)}),o)},r.changeVersion=function(e,s,a,o,l){if(!r.database)return r.logErrors&&console.log("Error: Database needs to be opened before sql can be processed."),!1;if(r.database.version===e){var i=u(a);n(o)&&(o=t),n(l)&&(l=r.defaultFailureCallback),r.database.changeVersion(e,s,(function(e){c(e,i,o,l)}),l)}},r}();websql.openDatabase("karpus.com.ua","Database of crm logic",3145728);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
