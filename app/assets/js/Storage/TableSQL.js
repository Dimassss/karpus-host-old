class TableSQL{constructor(r,s,t){this.k=r,this.table=s,this.v=t,websql.process(`CREATE TABLE IF NOT EXISTS ${s}(${function(){var r="";for(var s in t)r+=t[s]+",";return r.slice(0,-1)}()})`)}l(r,s){let t=this;for(var e=[],n=[],a=0;a<r.length;a++)r[a]&&(n[n.length]={sql:`SELECT * FROM ${t.table} WHERE ${t.k} in (${function(){for(var s="",t=0;t<r.length;t++)s+="?,";return s.slice(0,-1)}()})`,data:r,success:(r,s)=>{for(var t=0;t<s.rows.length;t++){var n=s.rows.item(t);for(var a in e[t]={},n)e[t][a]=n[a]}}});n.length>0?websql.process(n,()=>{s(e)}):s(e)}save(r,s){for(var t=this.k,e=this.table,n=this.v,a=[],l=0,i=[],o=0;o<r.length;o++)r[o]&&!r[o][t]?(a[a.length]=o-1,i[i.length]={sql:`INSERT INTO ${e} ${function(){var r="(",s="(";for(var e in n)e!=t&&(r+=e+",",s+="?,");return`${r=r.slice(0,-1)+")"} VALUES ${s=s.slice(0,-1)+")"}`}()}`,data:function(){var s=[],e=r[o].toDB();for(var a in n)a!=t&&(s[s.length]=e[a]);return s}(),success:(s,e)=>{r[a[l]+1][t]=e.insertId,l++}}):r[o]&&(i[i.length]={sql:`UPDATE ${e} SET ${function(){var r="";for(var s in n)s!=t&&s!=Object.keys(t)[0]&&(r+=`${s} = ?,`);return r.slice(0,-1)}()} WHERE ${t} = ${r[o][t]}`,data:function(){var s=[],e=r[o].toDB();for(var a in n)a!=t&&(s[s.length]=e[a]);return s}()});i.length>0?websql.process(i,()=>{s(r)}):s(r)}del(r){r=r.map(r=>parseInt(r));for(var s=this.k,t=this.table,e=0;e<r.length;e++)r[e]&&websql.process({sql:`DELETE FROM ${t} WHERE ${s} = ?`,data:[r[e]]})}sl(r,s,t){var e=[];websql.process({sql:`SELECT * FROM ${this.table} WHERE ${r}`,data:s,success:(r,s)=>{for(var t=0;t<s.rows.length;t++){var n=s.rows.item(t);for(var a in e[t]=[],n)e[t][a]=n[a]}}},()=>t(e))}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
