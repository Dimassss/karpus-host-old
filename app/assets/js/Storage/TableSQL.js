class TableSQL{constructor(s,t,e){this.k=s,this.table=t,this.v=e}l(s,t){$.post("/crm/load",{keys:s,table:this.table,k:this.k}).done(s=>{t(JSON.parse(s))})}save(s,t){$.post("/crm/save",{records:s,table:this.table,k:this.k,v:this.v}).done(s=>{t(JSON.parse(s))})}del(s){$.post("/crm/del",{keys:s,table:this.table,k:this.k})}sl(s,t,e){$.post("/crm/select",{where:s,table:this.table,data:t}).done(s=>{e(JSON.parse(s))})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
