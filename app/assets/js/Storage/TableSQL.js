class TableSQL{constructor(t,s,e){this.k=t,this.table=s,this.v=e}l(t,s){$.post("/crm/load",{keys:t,table:this.table,k:this.k}).done(t=>{s(t)})}save(t,s){$.post("/crm/save",{records:t,table:this.table,k:this.k,v:this.v}).done(t=>{s(t)})}del(t){$.post("/crm/del",{keys:t,table:this.table,k:this.k})}sl(t,s,e){$.post("/crm/select",{where:t,table:this.table,data:s}).done(t=>{e(t)})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
