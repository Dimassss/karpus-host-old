class CyclesInput extends Input{constructor(){function t(t){return document.querySelector(t)}function e(t){return document.querySelectorAll(t)}function r(e,r,n,i){if(!i)i=t(e);var c,s,o,l,a=0,u=0,p=[];o=parseInt(n(i.querySelector("h6 input[placeholder='Count']").value)),n(i.getAttribute("data-name")),c=i.querySelector("h6 input[placeholder='Price']").value?parseFloat(n(i.querySelector("h6 input[placeholder='Price']").value)):0,s=parseFloat(n(i.querySelector("h6 .weight").innerHTML)),l=[parseInt(i.querySelectorAll("h6 progress")[0].value),parseInt(i.querySelectorAll("h6 progress")[1].value)];for(var d=Array.from(i.querySelectorAll(".products-container .product")),v=0;v<d.length;v++){var w,y,h,_,g,j=d[v];w=n(j.querySelector("div:nth-child(1)").innerHTML),y=n(j.querySelector("div:nth-child(2)").innerHTML),h=(()=>{var t=j.querySelector("div:nth-child(3) select");if(t){var e={selected:t.value};return Array.from(t.options).forEach(t=>e[t.value]=parseFloat(t.innerText.split("-")[1])),Object.assign({},e)}})(),_=parseInt(n(j.querySelector("div input[placeholder='Count']").value)),g=parseFloat(n(j.querySelector("div:nth-child(2)").getAttribute("data-weight"))),p[p.length]={name:w,unit:y,price:h,count:_,weight:g},a+=("object"==typeof h?h[h.selected]:h)*_,u+=g*_}return Object.assign({},{price:c,pcPrice:Number(a.toFixed(2)),weight:s,pcWeight:Number(u.toFixed(2)),count:o,products:p,progress_bars:l})}if(g.Input.cycles)return g.Input.cycles;return super({t1:(e,r,n)=>{const i=n(t(e).value);if(r(i))return i;console.assert(!1,{field:e,class:"Cycles",src:"js/HTML_Input/customerProfile.js",errorMsg:"Invalid input",data:i})},t2:(e,r,n)=>{var i,c=t(e),s=0,o=0,l=[];i=[parseInt(c.querySelectorAll("h6 progress")[0].value),parseInt(c.querySelectorAll("h6 progress")[1].value)];for(var a=c.querySelectorAll(".products-container .product"),u=0;u<a.length;u++){var p,d,v,w,y,h=a[u];p=n(h.querySelector("div:nth-child(1)").innerHTML),d=n(h.querySelector("div:nth-child(2)").innerHTML),v=(v=(()=>{var t=h.querySelector("div:nth-child(3) select"),e={selected:t.value};return Array.from(t.options).forEach(t=>{e[t.value]=parseFloat(t.innerText.split("-")[1])}),Object.assign({},e)})())||parseFloat(n(h.querySelector("div:nth-child(3)").innerText)),w=0|parseFloat(n(h.querySelector("div input[placeholder='Count']").value)),y=parseFloat(n(h.querySelector("div:nth-child(2)").getAttribute("data-weight"))),l[l.length]={name:p,unit:d,price:v,count:w,weight:y},s+=(v[v.selected]|v)*w,o+=y*w}return Object.assign({},{pcPrice:s,pcWeight:o,products:l,progress_bars:i})},t3:(e,r,n)=>parseFloat(n(t(e).value)),t4:(t,r,n)=>{const i={};return e(t).forEach(t=>{i[n(t.getAttribute("data-type"))]=parseFloat(n(t.value))}),i},t5:(e,r,n)=>{const i=[],c=n(t(e)).split(" ");return i[0]=parseFloat(c[0]),i[1]=parseFloat(c[1]),i[2]=parseFloat(c[2]),i},t6:(e,r,n)=>parseInt(n(t(e).getAttribute("data-id"))),t7:(e,r,n)=>{let i=t(e);return console.log(i,e),i?[i.parentNode.parentNode.getAttribute("id"),parseInt(i.getAttribute("data-id")),i]:[]},t8:(e,r,n)=>n(t(e).value).split(" "),t9:(e,r,n)=>{const i=n(t(e).value);r(i)||console.error({field:e,class:"CustomerProfile",src:"js/HTML_Input/customerProfile.js",errorMsg:"Invalid input",input:i});let c=t(e).getAttribute("id");return[i,Array.from(t(e).parentNode.parentNode.parentNode.querySelectorAll("."+c+"-container .chip chip")).map(t=>n(t.innerHTML))]},t10:(e,r,n)=>n(t(e).checked),t11:(r,n,i)=>{const c=i(e(r)[0].value),s=i(e(r)[1].value);if(!n(c)||!n(s))throw{field:r,class:"CustomerProfile",src:"js/HTML_Input/customerProfile.js",errorMsg:"Invalid input",input:[c,s]};t(r).getAttribute("id");const o=Array.from(t(r).parentNode.parentNode.querySelectorAll(".chip chip")).map(t=>i(t.innerHTML).split(" - "));let l;return l=[[c,s]].concat(o),l},t12:(t,n,i)=>{const c={},s=Array.from(e(t));for(var o=0;o<s.length;o++){const e=parseInt(i(s[o].querySelector("h6 input[placeholder='Count']").value));e<1||!e||(c[i(s[o].getAttribute("data-name"))]=r(t,0,i,s[o]))}return c},t13:(e,r,n)=>parseInt(n(t(e).getAttribute("data-customer-id")))},{v:()=>!0,v1:t=>""!==t},[["Tbl_Slct","table tr.selected","v","t7"],["C_Slct","label.selected[for^=cycle-]","v","t7"],["P_ID",".w-products form","v","t6"],["K_ID",".w-kits form","v","t6"],["C_ID","section.cycles-container .cycle","v","t6"],["add_c",".cycles-tab-container .controll input[name=new-cycle-name]","v","t1"],["or_SF",".cycles-container .w-orders input#js-search-field","v","t1"],["kt_SF",".cycles-container .w-kits input#js-search-field","v","t1"],["kt_Nm",".cycles-container .w-kits input#js-kit-name","v","t1"],["kt_Pr",".cycles-container .w-kits input#js-kit-price","v","t3"],["kt_Tp",".cycles-container .w-kits input#js-kit-type","v","t1"],["kt_Sz",".cycles-container .w-kits input#js-kit-size","v","t1"],["kt_Dm",".cycles-container .w-kits input#js-kit-dimensions","v","t8"],["kt_w",".cycles-container .w-kits input#js-kit-weight","v","t3"],["kt_d",".cycles-container .w-kits textarea#js-kit-description","v","t1"],["kt_prs",".cycles-container .w-kits .kits .kit","v","t2"],["pr_SF",".cycles-container .w-products input#js-search-field","v","t1"],["pr_Nm",".cycles-container .w-products input#js-product-name","v","t1"],["pr_Unt",".cycles-container .w-products select#js-product-unit","v","t1"],["pr_c",".cycles-container .w-products table#js-product-count-set input","v","t4"],["pr_p",".cycles-container .w-products table#js-product-price-set input","v","t4"],["pr_Dm",".cycles-container .w-products input#js-product-dimensions","v","t8"],["pr_w",".cycles-container .w-products input#js-product-weight","v","t3"],["pr_d",".cycles-container .w-products textarea#js-product-description","v","t1"],["AW_ID",".alert-window","v","t6"],["AW_Tel",".alert-window input#js-telephones","v","t9"],["AW_SM",".alert-window input#js-social-media","v","t9"],["AW_ON",".alert-window textarea#js-order-notes","v","t1"],["AW_Pr",".alert-window textarea#js-order-preferences","v","t1"],["AW_Adr",".alert-window input#js-addresses","v","t9"],["AW_Sum",".alert-window input#js-summary","v","t1"],["AW_Bill",".alert-window input#js-is-billed","v","t10"],["AW_Pay",".alert-window input#js-order-paid","v1","t1"],["AW_P",".alert-window input#js-order-pay-date, .alert-window input#js-order-paid","v","t11"],["AW_PD",".alert-window input#js-order-pay-date","v1","t1"],["AW_c_id",".alert-window select#js-cycle","v","t1"],["AW_kits",".alert-window .kits .kit:not(.add)","v","t12"],["AW_n_ths",".alert-window input#js-is-not-this","v","t10"],["AW_an_FN",".alert-window input#js-another-full-name","v","t1"],["AW_an_Tel",".alert-window input#js-another-telephone","v","t1"],["Cstm_ID",".alert-window","v","t13"]]),g.Input.cycles=this}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
