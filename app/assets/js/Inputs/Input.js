class Input{constructor(t,e,s){this.takes=t,this.validators=e,this.inputs={},this.addInputs(s)}takeData(t){for(var e=this.inputs,s=0;s<t.length;s++)e=e[t[s]];return this.takes[e.take_name](e.css_selector,this.validators[e.validator_name],t=>String(t).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;"))}addTakes(t){this.takes={...this.takes,...t}}deleteTakes(t){var e=this;t.forEach(t=>delete e.takes[t])}getTakes(){return Object.assign({},this.takes)}addValidators(t){this.validators={...this.validators,...t}}deleteValidators(t){var e=this;t.forEach(t=>delete e.validators[t])}getValidators(){return Object.assign({},this.validators)}addInputs(t){function e(t,s,a,r,i){return t[s[0]]||(t[s[0]]={}),s.length<=1?(a.split("?").length<=1&&(document.querySelector(a)||console.warn("Invalid css selector for Input: "+a)),t[s].css_selector=a,t[s].validator_name=r,t[s].take_name=i):t[s[0]]=e(t[s[0]],s.slice(1),a,r,i),t}for(var s=0;s<t.length;s++)this.inputs=e(this.inputs,t[s][0],t[s][1],t[s][2],t[s][3])}deleteInputs(t){function e(t,s){return Object.keys(t[s[0]]).filter(t=>1==t.length&&t!=s[1])[0]?t[s[0]]=e(t[s[0]],s.slice(1)):delete t[s[0]],t}for(var s=0;s<t.length;s++)this.inputs=e(this.inputs,t[s])}getInputs(){return JSON.parse(JSON.stringify(this.inputs))}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
