class CustomerProfileInput extends Input{constructor(){function e(e){return document.querySelector(e)}function t(e){return document.querySelectorAll(e)}if(g.Input.customerProfile)return g.Input.customerProfile;function r(t,r,o,l){if(!l)l=e(t);var s,i,n,a,u=0,c=0,d=[];n=parseInt(o(l.querySelector("h6 input[placeholder='Count']").value)),o(l.getAttribute("data-name")),s=l.querySelector("h6 input[placeholder='Price']").value?parseFloat(o(l.querySelector("h6 input[placeholder='Price']").value)):0,i=parseFloat(o(l.querySelector("h6 .weight").innerHTML)),a=[parseInt(l.querySelectorAll("h6 progress")[0].value),parseInt(l.querySelectorAll("h6 progress")[1].value)];for(var p=Array.from(l.querySelectorAll(".products-container .product")),v=0;v<p.length;v++){var m,f,h,P,_,w=p[v];m=o(w.querySelector("div:nth-child(1)").innerHTML),f=o(w.querySelector("div:nth-child(2)").innerHTML),h=(()=>{var e=w.querySelector("div:nth-child(3) select");if(e){var t={selected:e.value};return Array.from(e.options).forEach(e=>t[e.value]=parseFloat(e.innerText.split("-")[1])),Object.assign({},t)}})(),P=parseInt(o(w.querySelector("div input[placeholder='Count']").value)),_=parseFloat(o(w.querySelector("div:nth-child(2)").getAttribute("data-weight"))),d[d.length]={name:m,unit:f,price:h,count:P,weight:_},u+=("object"==typeof h?h[h.selected]:h)*P,c+=_*P}return Object.assign({},{price:s,pcPrice:Number(u.toFixed(2)),weight:i,pcWeight:Number(c.toFixed(2)),count:n,products:d,progress_bars:a})}return super({t1:(t,r,o)=>{const l=o(e(t).value);if(r(l))return l;console.assert(!1,{field:t,class:"CustomerProfile",src:"js/HTML_Input/customerProfile.js",errorMsg:"Invalid input"})},t2:(t,r,o)=>o(e(t).checked),t3:(e,o,l)=>{const s={},i=Array.from(t(e));for(var n=0;n<i.length;n++){const t=parseInt(l(i[n].querySelector("h6 input[placeholder='Count']").value));t<1||!t||(s[l(i[n].getAttribute("data-name"))]=r(e,0,l,i[n]))}return s},t4:r,t5:(t,r,o)=>{const l=o(e(t).value);r(l)||console.error({field:t,class:"CustomerProfile",src:"js/HTML_Input/customerProfile.js",errorMsg:"Invalid input",input:l});let s=e(t).getAttribute("id");return[l,...Array.from(e(t).parentNode.parentNode.parentNode.querySelectorAll("."+s+"-container .chip chip")).map(e=>o(e.innerHTML))]},t6:(r,o,l)=>{const s=l(t(r)[0].value),i=l(t(r)[1].value);if(!o(s)||!o(i))throw{field:r,class:"CustomerProfile",src:"js/HTML_Input/customerProfile.js",errorMsg:"Invalid input",input:[s,i]};e(r).getAttribute("id");const n=Array.from(e(r).parentNode.parentNode.querySelectorAll(".chip chip")).map(e=>l(e.innerHTML).split(" - "));let a;return a=[[s,i]].concat(n),a},t7:(t,r,o)=>parseInt(o(e(t).getAttribute("data-id"))),t8:(t,r,o)=>e(t),t9:(t,r,o)=>{let l=e(t);return l?[l.parentNode.parentNode.getAttribute("id"),parseInt(l.getAttribute("data-id")),l]:[]},t10:(e,r,o)=>t(e)},{v:()=>!0,v1:e=>""!==e},[["TblC_Slct","table#customers .selected","v","t9"],["TblO_Slct","table#customer_orders .selected","v","t9"],["Tbl_rows","table#customers tbody tr","v","t10"],["NT_SF",".customerProfile input[name=js-customer-nav-table-search]","v","t1"],["WP_ID",".customerProfile","v","t7"],["WP_SC",".customerProfile table#customers tr.selected","t8"],["WP_SC",".customerProfile table#customers tr.selected","v","t8"],["WP_Nm",".customerProfile input#js-full-name","v","t1"],["WP_Tel",".customerProfile input#js-telephones","v1","t5"],["WP_Adr",".customerProfile input#js-addresses","v1","t5"],["WP_E-m",".customerProfile input#js-e-mail","v","t1"],["WP_Nt",".customerProfile textarea#js-notes","v","t1"],["WP_Pr",".customerProfile textarea#js-preferences","v","t1"],["WP_SM",".customerProfile input#js-social-medias","v1","t5"],["WP_Act",".customerProfile input#js-activity","v","t1"],["WO_SF",".customerProfile input[name=js-customer-order-table-search]","v","t1"],["WO_SO",".customerProfile table#customer_orders tr.selected","v","t8"],["AW_ID",".alert-window","v","t7"],["AW_Tel",".alert-window input#js-telephones","v","t5"],["AW_SM",".alert-window input#js-social-media","v","t5"],["AW_ON",".alert-window textarea#js-order-notes","v","t1"],["AW_Pr",".alert-window textarea#js-order-preferences","v","t1"],["AW_Adr",".alert-window input#js-addresses","v","t5"],["AW_Sum",".alert-window input#js-summary","v","t1"],["AW_Bill",".alert-window input#js-is-billed","v","t2"],["AW_Pay",".alert-window input#js-order-paid","v1","t1"],["AW_P",".alert-window input#js-order-pay-date, .alert-window input#js-order-paid","v","t6"],["AW_PD",".alert-window input#js-order-pay-date","v1","t1"],["AW_c_id",".alert-window select#js-cycle","v","t1"],["AW_kits",".alert-window .kits .kit:not(.add)","v","t3"],["AW_n_ths",".alert-window input#js-is-not-this","v","t2"],["AW_an_FN",".alert-window input#js-another-full-name","v","t1"],["AW_an_Tel",".alert-window input#js-another-telephone","v","t1"]]),g.Input.customerProfile=this}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
