class CyclesDAO extends DAO{constructor(){super()}dispalyCycles(e,t,a){var r=new CycleTableSQL,i=new CyclesOutput;r.select(e,t,e=>{let t={};for(var r=0;r<e.length;r++)t[e[r].id]=e[r].name;i.insertData("C_CL1",t),i.insertData("C_CL2",t),a&&a()})}fillCycleWindows(e,t){var a=new CycleTableSQL,r=this;r.cleanCycleWindows(),a.load([e],a=>{a[0];(new CyclesOutput).insertData("C_ID",e),(new OrderTableSQL).select("cycleID LIKE ?",[JSON.stringify(e)],a=>{r.fillOrdersWin(a.map(e=>e.id)),(new KitTableSQL).select("cycleID = ?",[e],a=>{r.fillKitsWin(a.map(e=>e.id)),(new ProductTableSQL).select("cycleID = ?",[e],e=>{r.fillProductsWin(e.map(e=>e.id),t)})})})})}cleanCycleWindows(){(new CyclesOutput).insertData("C_ID","-1"),this.cleanOrdersWin(),this.cleanKitsWin(),this.cleanProductsWin()}fillOrdersWin(e,t){var a=new OrderTableSQL,r=new CyclesOutput;function i(e,t){switch(t){case"kits":return Object.keys(e.kits).join(", ");case"products":return Object.keys(e.kits).map(t=>t+": ["+e.kits[t].products.map(e=>e.name+": "+e.count).join(", ")+"]").join("<br>");case"pays":case"payDates":return e[t].shift(),e[t].join(", ");default:return e[t]}}a.load(e,e=>{let a=["fullName","telephone","kits","products","adress","summary","billed","pays","payDates","orderNotes","socialMedia"];var n={body:[]};(new CustomerTableSQL).load(e.map(e=>e.customerID),t=>{let s={};t.forEach(e=>s[e.id]=e.fullName),e.forEach((t,a)=>e[a].fullName=s[t.customerID]),e.forEach(e=>{let t=[];t[t.length]={id:e.id};for(var r=0;r<a.length;r++)t[t.length]=[i(e,a[r]),1,1];console.log(e),n.body[n.body.length]=t}),r.insertData("O_Tbl",n)}),t&&t()})}cleanOrdersWin(){(new CyclesOutput).insertData("O_Tbl",{body:-1})}fillKitsWin(e,t){var a=new KitTableSQL,r=new CyclesOutput,i={body:[]};a.load(e,e=>{for(var n=0;n<e.length;n++){var s=[{id:e[n].id,cycleID:e[n].cycleID}];for(var c in a.v)"id"!=c&&"cycleID"!=c&&("name"!=c&&"type"!=c&&"price"!=c||(s[s.length]="price"==c?[null!=e[n][c]?e[n][c]:e[n].pcPrice,1,1]:[e[n][c],1,1],i.body[i.body.length]=Array.from(s)))}r.insertData("K_Tbl",i),t&&t()})}cleanKitsWin(){var e=new CyclesOutput;this.cleanKitProfile(),e.insertData("K_Tbl",{body:-1})}fillProductsWin(e,t){var a=new ProductTableSQL,r=new CyclesOutput;const i=["name","unit","count","price","dimensions","weight","description"];var n={body:[]};console.log(a.v,i),a.load(e,e=>{for(var a=0;a<e.length;a++){var s=[{id:e[a].id,cycleID:e[a].cycleID}];for(var c in i)if("id"!=i[c]&&"cycleID"!=i[c]){const t=i[c];if("count"==t||"price"==t)for(var l in e[a][t])s[s.length]=[e[a][t][l],1,1];else null==e[a][t]?s[s.length]=["",1,1]:"object"==typeof e[a][t]?s[s.length]=[e[a][t].join(" * "),1,1]:s[s.length]=[e[a][t],1,1]}n.body[n.body.length]=Array.from(s)}r.insertData("P_Tbl",n),t&&t()})}cleanProductsWin(){var e=new CyclesOutput;this.cleanProductProfile(),e.insertData("P_Tbl",{body:-1})}fillOrderCreatingWin(e,t){var a=new OrderTableSQL,r=new CustomerTableSQL,i=new CycleTableSQL,n=new KitTableSQL,s=new CyclesOutput;a.load([e],c=>{var l=c[0];if(!l)return!1;r.load([l.customerID],r=>{let c=r[0];c?(s.insertData("Cstm_ID",c.id),s.insertData("AW_Nm",c.fullName),s.insertData("AW_Pr",c.preferences),s.insertData("AW_Tel",[l.telephone[0],...c.telephones.filter(e=>e!=l.telephone[0])]),s.insertData("AW_SM",[l.socialMedia[0],...c.socialMedia.filter(e=>e!=l.socialMedia[0])]),s.insertData("AW_Adr",[l.adress[0],...c.adresses.filter(e=>e!=l.adress[0])]),s.insertData("AW_ID",l.id),s.insertData("AW_ON",l.orderNotes),s.insertData("AW_Sum",l.summary),s.insertData("AW_Bill","true"==l.billed),s.insertData("AW_n_ths","true"==l.isNotThis),s.insertData("AW_an_FN","true"==l.isNotThis?l.anotherFullName:""),s.insertData("AW_an_Tel","true"==l.isNotThis?l.anotherTelephone:""),s.insertData("AW_P",l.payDates.map((e,t)=>[e,l.pays[t]])),s.insertData("AW_kits",{}),i.select("TRUE",[],e=>{var a=e.find(e=>e.id==l.cycleID),r=e.filter(e=>e.id!=l.cycleID);s.insertData("AW_c_id",[[a.id,a.name],...r.map(e=>[e.id,e.name])]),n.select("cycleID = ?",[l.cycleID],e=>{(new ProductTableSQL).select("cycleID = ?",[l.cycleID],a=>{e.forEach((t,r)=>{let i={};e[r].products.forEach((e,t)=>i[e.name]=t),e[r].products=a.map(t=>{if(void 0!==i[t.name]){let a=e[r].products[i[t.name]];t.price.selected=a.price.selected,t.count=a.count}else t.price.selected=t.price["p-kt"],t.count=0;return JSON.parse(JSON.stringify(t))});var n=l.kits[t.name];if(!n)return!1;e[r].count="number"==typeof n.count?n.count:0,e[r].price="number"==typeof n.price?n.price:e[r].price;var s={};n.products.forEach((e,t)=>s[e.name]=t);let c=0,o=0;t.products.forEach((e,a)=>{void 0!==s[e.name]?(e.count=n.products[s[e.name]].count,e.price.selected=n.products[s[e.name]].price.selected,e.count>0&&(c+=e.count*e.price[e.price.selected],o+=e.weight*e.count)):(e.count=0,e.price.selected="p-kt"),t.products[a]=Object.assign({},e)}),console.log(t,c,o),t.pcPrice=c,t.pcWeight=o});var r={};e.forEach(e=>{console.log(e),r[e.name]=JSON.parse(JSON.stringify(e))}),s.insertData("AW_kits",r),s.insertData("AW_SumPC",e.filter(e=>e.count>0).map(e=>e.count*(e.price?e.price:e.pcPrice)).reduce((e,t)=>e+t,0)+" uah"),t&&t()})})})):(s.insertData("O_Tbl",{body:[[{id:e}]]}),a.del([e]))})})}updateOrderForm(e){let t=new CyclesOutput;for(var a in e)e[a].name=a;let r=Object.values(e).filter(e=>e.count>0).map(e=>[e.count*(e.price?e.price:e.pcPrice),e.name]);t.insertData("AW_SumPC",r.map(e=>e[0]).reduce((e,t)=>e+t,0)+" uah"),r.forEach(a=>{t.insertData("AW_KtPC",[e[a[1]].pcPrice,e[a[1]].pcWeight,a[1]])})}fillKitProfile(e,t){var a=new KitTableSQL,r=new CyclesOutput;a.load([e],e=>{let a=e[0]?e[0]:{name:"",price:0,pcPrice:0,type:"",size:"",dimensions:[0,0,0],weight:0,pcWeight:0,description:"",products:[],progressBars:[0,0]};(new ProductTableSQL).select("cycleID = ?",[t],e=>{let t={};a.products.forEach((e,a)=>t[e.name]=a),a.products=e.map(e=>{if(void 0!==t[e.name]){let r=a.products[t[e.name]];e.price.selected=r.selected,e.count=r.count}else e.price.selected=e.price["p-kt"],e.count=0;return e}),(e=>{r.insertData("K_ID",e.id),r.insertData("K_Nm",e.name),r.insertData("K_Pr",e.price),r.insertData("K_PcPr",Number(e.pcPrice.toFixed(2))),r.insertData("K_Tp",e.type),r.insertData("K_Sz",e.size),r.insertData("K_Dm",e.dimensions),r.insertData("K_W",e.weight),r.insertData("K_PcW",Number(e.pcWeight.toFixed(2))),r.insertData("K_D",e.description),r.insertData("K_Cr",e)})(a)})})}cleanKitProfile(e){var t=new CyclesOutput;t.insertData("K_ID",""),t.insertData("K_Nm",""),t.insertData("K_Pr",0),t.insertData("K_PcPr",0),t.insertData("K_Tp",""),t.insertData("K_Sz",""),t.insertData("K_Dm",[0,0,0]),t.insertData("K_W",0),t.insertData("K_PcW",0),t.insertData("K_D",""),(new ProductTableSQL).select("cycleID = ?",[e],e=>{t.insertData("K_Cr",{products:e,progress_bars:[0,0]})})}fillProductProfile(e){var t=new ProductTableSQL,a=new CyclesOutput;t.load([e],e=>{let t=e[0];t=t||{name:"",unit:"",count:{},price:{},dimensions:[0,0,0],weight:0,description:""},a.insertData("P_ID",t.id),a.insertData("P_Nm",t.name),a.insertData("P_Unt",t.unit),a.insertData("P_C",t.count),a.insertData("P_Pr",t.price),a.insertData("P_Dm",t.dimensions),a.insertData("P_W",t.weight),a.insertData("P_D",t.description)})}cleanProductProfile(){var e=new CyclesOutput,t="",a="",r="",i={"c-st":0,"c-wh":0,"c-sh":0,"c-kt":0,"c-or":0,"c-lft":0},n={"p-wh":0,"p-sh":0,"p-rst":0,"p-kt":0},s=[0,0,0],c=0,l="";e.insertData("P_Nm",a),e.insertData("P_ID",t),e.insertData("P_Unt",r),e.insertData("P_C",i),e.insertData("P_Pr",n),e.insertData("P_Dm",s),e.insertData("P_W",c),e.insertData("P_D",l)}createCycle(e,t,a){var r=new CycleTableSQL;r.load([e],i=>{let n=-1!=e?i[0]:new CycleModel({name:t,kitsID:[],ordersID:[],productsID:[]});r.save([n],e=>{a(e[0].id)})})}closeOrderCreatingWindow(){document.querySelector(".alert-window").style.display="none"}openOrderCreatingWindow(){document.querySelector(".alert-window").style.display="block"}getOrderFromPage(e,t){var a=new CyclesInput,r=new OrderModel({id:a.takeData("AW_ID"),cycleID:a.takeData("AW_c_id"),telephone:a.takeData("AW_Tel"),socialMedia:a.takeData("AW_SM"),adress:a.takeData("AW_Adr"),orderNotes:a.takeData("AW_ON"),summary:a.takeData("AW_Sum"),billed:a.takeData("AW_Bill"),isNotThis:a.takeData("AW_n_ths"),payDates:a.takeData("AW_PD"),pays:a.takeData("AW_Pay"),customerID:a.takeData("Cstm_ID"),anotherFullName:a.takeData("AW_an_FN"),anotherTelephone:a.takeData("AW_an_Tel"),kits:a.takeData("AW_kits")});if(t)return r.kits;const i=a.takeData("AW_P");let n=i.map(e=>e[0]),s=i.map(e=>e[1]);r.pays=n,r.payDates=s,(new CustomerTableSQL).load([r.customerID],t=>{if(t[0]){let i=t[0];i.telephones.find(e=>e==r.telephone[0])||i.telephones.push(r.telephone[0]),i.adresses.find(e=>e==r.adress[0])||i.adresses.push(r.adress[0]),i.socialMedia.find(e=>e==r.socialMedia[0])||i.socialMedia.push(r.socialMedia[0]),i.preferences=a.takeData("AW_Pr"),e(r,i)}})}saveOrder(e){this.fillOrdersWin(e.id),(new OrderTableSQL).save([e],()=>{})}saveCustomer(e){(new CustomerTableSQL).save([e],()=>{})}displayKits(e){var t=new CyclesOutput;new CycleTableSQL;(new KitTableSQL).select("cycleID = ?",[e],a=>{var r={};(new ProductTableSQL).select("cycleID = ?",[e],e=>{for(var i in a){let t=a[i],n={};t.products.forEach((e,t)=>n[e.name]=t),t.products=e.map(e=>{if(void 0!==n[e.name]){let a=t.products[n[e.name]];e.price.selected=a.selected,e.count=a.count}else e.price.selected=e.price["p-kt"],e.count=0;return e}),a[i].count||(a[i].count=0),r[a[i].name]=JSON.parse(JSON.stringify(t))}t.insertData("AW_kits",r)})})}deleteCycle(e){let t=new CyclesOutput,a=new OrderTableSQL,r=new KitTableSQL,i=new ProductTableSQL,n=new CycleTableSQL,s={};s[e]=!1,t.insertData("C_CL1",s),t.insertData("C_CL2",s),a.select("cycleID LIKE ?",[JSON.stringify(e+"")],t=>{r.select("cycleID = ?",[e],s=>{i.select("cycleID = ?",[e],c=>{a.del(t.map(e=>e.id)),r.del(s.map(e=>e.id)),i.del(c.map(e=>e.id)),n.del([e])})})})}addToArray(e,t){if(!e)return!1;let a=new CyclesInput,r=new CyclesOutput,i=a.takeData(e);r.insertData(e,[t,...i])}takeProductFromPage(){var e=new CyclesInput;let t=e.takeData("P_ID");return new ProductModel({id:t||void 0,cycleID:e.takeData("C_ID"),name:e.takeData("pr_Nm"),unit:e.takeData("pr_Unt"),price:e.takeData("pr_p"),count:e.takeData("pr_c"),dimensions:e.takeData("pr_Dm"),weight:e.takeData("pr_w"),description:e.takeData("pr_d")})}takeKitFromPage(){var e=new CyclesInput;let t=e.takeData("K_ID");return new KitModel({id:t||void 0,cycleID:e.takeData("C_ID"),name:e.takeData("kt_Nm"),price:e.takeData("kt_Pr"),weight:e.takeData("kt_w"),description:e.takeData("kt_d"),size:e.takeData("kt_Sz"),type:e.takeData("kt_Tp"),dimensions:e.takeData("kt_Dm"),...e.takeData("kt_prs")})}getCurrentCycleID(){return(new CyclesInput).takeData("C_ID")}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
