class CustomerProfileDAO extends DAO{constructor(){super()}addCustomersToNavTable(e,t,a){var r=new CustomerTableSQL,l=new CustomerProfileOutput,s=["fullName","telephones"],o={body:[]};r.select(e,t,e=>{e.forEach(e=>{let t=[];t[t.length]={id:e.id};for(var a=0;a<s.length;a++){let r=e[s[a]];"object"==typeof r&&(r=JSON.stringify(r).slice(4,-1).split('","').join("<br>").replace(/\"/g,"")),t[t.length]=[r,1,1]}o.body[o.body.length]=t}),e[0]&&(g.Controller.CustomerProfile.customerNavTableScrollCounter=-1),l.insertData("WP_Tbl",o),a&&a()})}fillCustomerWin(e,t){var a=new CustomerProfileOutput;(new CustomerTableSQL).load([e],r=>{var l=r[0];l=null!=l?l:{fullName:"",telephones:[""],adresses:[""],email:"",notes:"",preferences:"",socialMedia:[""],activity:"",isEmpty:!0};a.insertData("WP_ID",e),a.insertData("WP_Nm",l.fullName),a.insertData("WP_Tel",l.telephones),a.insertData("WP_Adr",l.adresses),a.insertData("WP_E-m",l.email),a.insertData("WP_Nt",l.notes),a.insertData("WP_Pr",l.preferences),a.insertData("WP_SM",l.socialMedia),a.insertData("WP_Act",l.activity),g.Controller.CustomerProfile.orderNavTableScrollCounter=0,a.insertData("WO_Tbl",{body:-1}),l.isEmpty||this.addOrdersToTable(e,void 0,t)})}addOrdersToTable(e,t,a,r){e=parseInt(e);let l=(new CustomerProfileInput).takeData("WO_SF");l=""!=l?l:void 0,l&&(g.Controller.CustomerProfile.orderNavTableScrollCounter=0);let s=new OrderTableSQL,o=new CycleTableSQL,i=new CustomerProfileOutput;-1!=g.Controller.CustomerProfile.orderNavTableScrollCounter&&o.select("1=1",[],l=>{s.select((null!=t?"id = ?":"customerID = ?")+(r?"":" ORDER BY id DESC LIMIT ?, ?"),r?[t]:[null!=t?t:e,g.Controller.CustomerProfile.orderNavTableScrollCounter*g.Controller.CustomerProfile.orderNavTableCountToSelect,g.Controller.CustomerProfile.orderNavTableCountToSelect],e=>{if(e.length>0){let a;var t={body:[]};a=["cycleID","kits","products","adress","summary","billed","pays","payDates","orderNotes","socialMedia"],e.forEach(e=>{let l=[];l[l.length]={id:e.id};for(var s=0;s<a.length;s++)l[l.length]=[r(e,a[s]),1,1];t.body[t.body.length]=l}),i.insertData("WO_Tbl",t),g.Controller.CustomerProfile.orderNavTableScrollCounter++}else g.Controller.CustomerProfile.orderNavTableScrollCounter=-1;function r(e,t){switch(t){case"cycleID":let a=l.find(a=>a.id==e[t]);return a?a.name:"Not Selected";case"kits":return Object.keys(e.kits).join(", ");case"products":return Object.keys(e.kits).map(t=>t+": ["+e.kits[t].products.map(e=>e.name+": "+e.count).join(", ")+"]").join("<br>");case"pays":case"payDates":return e[t].shift(),e[t].join(", ");default:return e[t]}}a&&a()})})}fillOrderCreatingWin(e,t,a){var r=new OrderTableSQL,l=new CustomerTableSQL,s=new CycleTableSQL,o=new KitTableSQL,i=new CustomerProfileOutput;r.load([t],n=>{var c=n[0];c||(c={id:-1,telephone:[""],socialMedia:[""],adress:[""],orderNotes:"",summary:0,billed:!1,isNotThis:!1,payDates:[""],pays:[""],cycleID:-1,customerID:e}),l.load([e],e=>{let l=e[0];l?(i.insertData("AW_Opn",!0),i.insertData("AW_Nm",l.fullName),i.insertData("AW_Pr",l.preferences),i.insertData("AW_Tel",[c.telephone[0],...l.telephones.filter(e=>e!=c.telephone[0])]),i.insertData("AW_SM",[c.socialMedia[0],...l.socialMedia.filter(e=>e!=c.socialMedia[0])]),i.insertData("AW_Adr",[c.adress[0],...l.adresses.filter(e=>e!=c.adress[0])]),i.insertData("AW_ID",c.id),i.insertData("AW_ON",c.orderNotes),i.insertData("AW_Sum",c.summary),i.insertData("AW_Bill","true"==c.billed),i.insertData("AW_n_ths","true"==c.isNotThis),i.insertData("AW_an_FN","true"==c.isNotThis?c.anotherFullName:""),i.insertData("AW_an_Tel","true"==c.isNotThis?c.anotherTelephone:""),i.insertData("AW_P",c.payDates.map((e,t)=>[c.pays[t],e])),i.insertData("AW_kits",{}),-1==c.cycleID?s.select("TRUE",[],e=>{i.insertData("AW_c_id",[[-1,"Select Cycle"],...e.map(e=>[e.id,e.name])])}):s.select("TRUE",[],e=>{var t=e.find(e=>e.id==c.cycleID),r=e.filter(e=>e.id!=c.cycleID);i.insertData("AW_c_id",[[t.id,t.name],...r.map(e=>[e.id,e.name])]),o.select("cycleID = ?",[c.cycleID],e=>{(new ProductTableSQL).select("cycleID = ?",[c.cycleID],t=>{e.forEach((a,r)=>{let l={};e[r].products.forEach((e,t)=>l[e.name]=t),e[r].products=t.map(t=>{if(void 0!==l[t.name]){let a=e[r].products[l[t.name]];t.price.selected=a.price.selected,t.count=a.count}else t.price.selected=t.price["p-kt"],t.count=0;return JSON.parse(JSON.stringify(t))});var s=c.kits[a.name];if(!s)return!1;e[r].count="number"==typeof s.count?s.count:0,e[r].price="number"==typeof s.price?s.price:e[r].price;var o={};s.products.forEach((e,t)=>o[e.name]=t);let i=0,n=0;a.products.forEach((e,t)=>{void 0!==o[e.name]?(e.count=s.products[o[e.name]].count,e.price.selected=s.products[o[e.name]].price.selected,e.count>0&&(i+=e.count*e.price[e.price.selected],n+=e.weight*e.count)):(e.count=0,e.price.selected="p-kt"),a.products[t]=Object.assign({},e)}),a.pcPrice=i,a.pcWeight=n,console.log(a,i,n)});var r={};e.forEach(e=>{r[e.name]=JSON.parse(JSON.stringify(e))}),i.insertData("AW_kits",r),i.insertData("AW_SumPC",e.filter(e=>e.count>0).map(e=>e.count*(e.price?e.price:e.pcPrice)).reduce((e,t)=>e+t,0)+" uah"),a&&a()})})})):(i.insertData("O_Tbl",{body:[[{id:t}]]}),r.del([t]))})})}displayKits(e){var t=new CustomerProfileOutput;new CycleTableSQL;(new KitTableSQL).select("cycleID = ?",[e],a=>{var r={};(new ProductTableSQL).select("cycleID = ?",[e],e=>{for(var l in a){let t=a[l],s={};t.products.forEach((e,t)=>s[e.name]=t),t.products=e.map(e=>{if(void 0!==s[e.name]){let a=t.products[s[e.name]];e.price.selected=a.selected,e.count=a.count}else e.price.selected=e.price["p-kt"],e.count=0;return e}),a[l].count||(a[l].count=0),r[a[l].name]=JSON.parse(JSON.stringify(t))}t.insertData("AW_kits",r)})})}deleteCustomer(e){var t=new CustomerTableSQL,a=new CustomerProfileOutput;(new CustomerProfileInput).takeData("WP_ID")==e&&this.fillCustomerWin(-1),a.insertData("WP_Tbl_CD",e),t.del([e]),console.log(e)}deleteOrder(e){var t=new OrderTableSQL,a=new CustomerProfileOutput;t.del([e]),a.insertData("WP_Tbl_OD",e)}getCustomerFromPage(){var e=new CustomerProfileInput;return new CustomerModel({id:e.takeData("WP_ID"),fullName:e.takeData("WP_Nm"),telephones:["",...e.takeData("WP_Tel").filter(e=>e)],adresses:["",...e.takeData("WP_Adr").filter(e=>e)],email:e.takeData("WP_E-m"),notes:e.takeData("WP_Nt"),preferences:e.takeData("WP_Pr"),socialMedia:e.takeData("WP_SM"),activity:e.takeData("WP_Act")})}getOrderFromPage(e,t){let a=new CustomerProfileInput,r=new OrderModel({id:a.takeData("AW_ID"),cycleID:a.takeData("AW_c_id"),telephone:a.takeData("AW_Tel"),socialMedia:a.takeData("AW_SM"),adress:a.takeData("AW_Adr"),orderNotes:a.takeData("AW_ON"),summary:a.takeData("AW_Sum"),billed:a.takeData("AW_Bill"),isNotThis:a.takeData("AW_n_ths"),customerID:a.takeData("WP_ID"),anotherFullName:a.takeData("AW_an_FN"),anotherTelephone:a.takeData("AW_an_Tel"),kits:a.takeData("AW_kits")});if(t)return r.kits;let l=this.getCustomerFromPage();l.preferences=a.takeData("AW_Pr");let[s,o,i]=[l.telephones.find(e=>e==r.telephone),l.adresses.find(e=>e==r.adress),l.socialMedia.find(e=>e==r.socialMedia)];s||l.telephones.push(r.telephone),o||l.adresses.push(r.adress),i||l.socialMedia.push(r.socialMedia);const n=a.takeData("AW_P");let c=n.map(e=>e[0]),u=n.map(e=>e[1]);return r.pays=c,r.payDates=u,[r,l]}saveCustomer(e,t){let a=new CustomerTableSQL;-1==e.id&&delete e.id,a.save([e],e=>{t(e[0])})}saveOrder(e,t){let a=new OrderTableSQL;-1==e.id&&delete e.id,a.save([e],e=>{t(e[0])})}addToArray(e,t){if(!e)return!1;let a=new CustomerProfileInput,r=new CustomerProfileOutput,l=a.takeData(e);l[l.length]=JSON.parse(JSON.stringify(l[0])),l[0]=t,r.insertData(e,l)}selectTable(e){Array.from((new CustomerProfileInput).takeData("Tbl_rows")).forEach(t=>{var a=!1;Array.from(t.querySelectorAll("td")).forEach(t=>{t.innerHTML.search(e)>-1&&(a=!0)}),t.style.display=a?"table-row":"none"})}updateOrderForm(e){let t=new CustomerProfileOutput;for(var a in e)e[a].name=a;let r=Object.values(e).filter(e=>e.count>0).map(e=>[e.count*(e.price?e.price:e.pcPrice),e.name]);t.insertData("AW_SumPC",r.map(e=>e[0]).reduce((e,t)=>e+t,0)+" uah"),r.forEach(a=>{t.insertData("AW_KtPC",[e[a[1]].pcPrice,e[a[1]].pcWeight,a[1]])})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
